{{- 'visit-show-room.css' | asset_url | stylesheet_tag: true -}}
  <section class="section container">
    <div class="visit_showroom_header">
      <div class="visit_showroom_title">Visit a Showroom</div>
      <p>Experience AWOL products in person or connect virtually – from anywhere.</p>
      <div class="button_group">
        {% comment %} <input id="position" type="text" placeholder="{{ section.settings.input_lable }}"/> {% endcomment %}
        <div class="search_containers" style="width: 100%;">
          <input autocomplete="off" name="ship-address" id="ship-address" type="text" placeholder="{{ block.settings.input_lable }}"/>
          <input class="hidden_input" id="locality" name="locality" />
          <input class="hidden_input" id="state" name="state" />
          <input class="hidden_input" id="postcode" name="postcode" />
          <input class="hidden_input" id="country" name="country" />
        </div>
        <a style="display: none;" id="search" href="javascript:;" ></a>
        <div class="search_button">
          {% render 'icon' with 'show-search-icon' %}
        </div>
      </div>
    </div>
    <div class="visit_showroom_list" style="grid-template-columns: repeat({{ section.settings.grid_columns }}, 1fr);"></div>
  </section>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAOavTIWq4qRgppoQYzktYy5j0Yshb3HRI&callback=initAutocomplete&libraries=places&v=weekly" defer></script>
  <script>
    function removeParamsFromImageUrl(url) {
      return url.replace(/\?.*$/, '');
    }
    var autocomplete;
    var address1Field;
    var postalField;
    const inputElement = document.getElementById('ship-address');
    const search = document.getElementById('search')
    function initAutocomplete() {
      address1Field = document.querySelector("#ship-address");
      postalField = document.querySelector("#postcode");
      // Create the autocomplete object, restricting the search predictions to
      // addresses in the US and Canada.
      autocomplete = new google.maps.places.Autocomplete(address1Field, {
        componentRestrictions: { country: ["us"] },
        fields: ["address_components", "geometry"],
        types: [],
      });
      address1Field.focus();
      // When the user selects an address from the drop-down, populate the
      // address fields in the form.
      autocomplete.addListener("place_changed", fillInAddress);
    }
    function fillInAddress() {
      // Get the place details from the autocomplete object.
      const place = autocomplete.getPlace();
      var address1 = "";
      var postcode = "";
      // Get each component of the address from the place details,
      // and then fill-in the corresponding field on the form.
      // place.address_components are google.maps.GeocoderAddressComponent objects
      // which are documented at http://goo.gle/3l5i5Mr
      for (const component of place.address_components) {
        // @ts-ignore remove once typings fixed
        const componentType = component.types[0];
        switch (componentType) {
          case "street_number": {
            address1 = `${component.long_name} ${address1}`;
            break;
          }
          case "route": {
            address1 += component.short_name;
            break;
          }
          case "postal_code": {
            postcode = `${component.long_name}${postcode}`;
            break;
          }
          case "postal_code_suffix": {
            postcode = `${postcode}-${component.long_name}`;
            break;
          }
          case "locality":
            address1 += ` ${component.long_name}`;
            document.querySelector("#locality").value = component.long_name;
            break;
          case "administrative_area_level_1": {
            document.querySelector("#state").value = component.short_name;
            break;
          }
          case "country":
            // address1 += ` ${component.long_name}`;
            document.querySelector("#country").value = component.long_name;
            break;
        }
      }
      address1Field.value = address1;
      postalField.value = postcode;
      let lat = place.geometry.location.lat()
      let lng = place.geometry.location.lng()
      getData(lat, lng, 1, address1)
    }
    window.initAutocomplete = initAutocomplete;
    function metersToMiles(meters) {
      return meters / 1609.344
    }
    function getData(lat, lng, show, searchData) {
      $("#ship-address").val(searchData)
      $.ajax({
        url: 'https://admin.awolvision.com/prod-api/system/showrooms/list?pageSize=100',
        type: 'GET',
        dataType: 'json',
        contentType: "application/json",
        data: {
          pageNum: 1,
          lat: lat,
          lng: lng,
          isShow: show
        },
        success: function(response) {
          // 请求成功时的回调函数
          if (response.code == 200) {
            console.log('Response:', response.rows);
            var htmls = ""
            for (let i = 0; i < response.rows.length; i++) {
              if (response.rows[i].isShow == 1) {
                let photoArrs = response.rows[i].photoList
                let image_url = ""
                let distance = metersToMiles(Number(response.rows[i].distance)).toFixed(2);
                if (distance <= 0) {
                  distance = Number(response.rows[i].distance).toFixed(2) + 'm | '
                } else {
                  distance = metersToMiles(Number(response.rows[i].distance)).toFixed(2) + 'mi | '
                }
                if (photoArrs.length > 0) {
                  image_url = photoArrs[0].url
                } else {
                  image_url = "https://cdn.shopify.com/s/files/1/0554/7445/4576/files/thunder_room_swiper_image01.png?v=1727166601"
                }
                let type = response.rows[i].type == 1 ? "Neighborhood Showroom" : "Retail"
                console.log('photoArrs', photoArrs)
                htmls += "<div class='list_item'>"+
                  "<a href='https://awolvision.com/pages/showroom-details?id=" + response.rows[i].id + "&distance=" + distance + "'>" +
                    "<img src='"+ image_url +"' alt='' />" +
                    "<div class='item_subtitle'>"+ distance + " " + response.rows[i].city + ", " + response.rows[i].country +"</div>" +
                    "<div class='item_desc'>" + type +"</div>" +
                    "<div class='item_title'>"+ response.rows[i].tile +"</div>" +
                  "</a>" +
                  "<div class='link_to'><a class='link--animated' href='https://awolvision.com/pages/visit-a-neighborhood-showroom?showroomId="+ response.rows[i].id +"'>request a visit</a><a class='link--animated' href='https://awolvision.com/pages/connect-virtually?showroomId="+ response.rows[i].id +"'>connect virtually</a></div>" +
                "</div>"
              }
            }
          }
          $('.visit_showroom_list').html(htmls)
        },
        error: function(xhr, status, error) {
          // 请求失败时的回调函数
          console.error('Error:', error);
        }
      });
    }
    $(function() {
      let lat = shopCommon.getQueryParams('lat')
      let lng = shopCommon.getQueryParams('lng')
      let show = shopCommon.getQueryParams('isShow')
      let searchData = shopCommon.getQueryParams('searchData')
      console.log('lat', lat)
      if(lat && lng) {
        getData(lat, lng, show, searchData)
      } else {
        getData()
      }
    })
  </script>
  {% schema %}
  {
    "name": "Visit showroom",
    "class": "shopify-section--show-room",
    "settings": [
      {
        "type": "range",
        "id": "grid_columns",
        "label": "Grid columns",
        "max": 6,
        "min": 1,
        "step": 1,
        "default": 3
      },
      {
        "type": "text",
        "id": "input_lable",
        "label": "Search Input label"
      },
      {
        "type": "text",
        "id": "button_lable",
        "label": "Search button label"
      },
      {
        "type": "color",
        "id": "button_color",
        "label": "Button color",
        "default": "#1FAEFF"
      },
      {
        "type": "color",
        "id": "button_font_color",
        "label": "Button font color",
        "default": "#ffffff"
      }
    ],
    "blocks": [],
    "presets": [
      {
        "name": "Visit showroom",
        "settings": {}
      }
    ]
  }
  {% endschema %}